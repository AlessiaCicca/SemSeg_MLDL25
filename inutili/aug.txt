BISNET

Training details: We use mini-batch stochastic gradient descent (SGD) [16] with
batch size 16, momentum 0:9 and weight decay 1e􀀀4 in training. Similar to
[5, 6, 21], we apply the \poly" learning rate strategy in which the initial rate
is multiplied by (1 􀀀 iter
max iter )power each iteration with power 0:9. The initial
learning rate is 2:5e􀀀2.
Data augmentation: We employ the mean subtraction, random horizontal 
ip
and random scale on the input images to augment the dataset in training process.
The scales contains f 0.75, 1.0, 1.5, 1.75, 2.0g. Finally, we randomly crop the
image into x size for training.
FROM BiSeNet: Bilateral Segmentation Network for Real-time Semantic Segmentation

---------------------------------------------------------------------------------

Training. Our models are trained from scratch with
the “kaiming normal” initialization manner (He et al.,
2015). We use the stochastic gradient descent (SGD)
algorithm with 0.9 momentum to train our model. For
all datasets, we adopt 16 batch size. For the Cityscapes
and CamVid datasets, the weight decay is 0.0005 weight
decay while the weight decay is 0.0001 for the COCOStuff dataset. We note that the weight decay regularization is only employed on the parameters of the convolution layers. The initial rate is set to 5e
−2 with a “poly”
learning rate strategy in which the initial rate is multiplied by (1 −
iter
itersmax
)
power each iteration with power
0.9. Besides, we train the model for 150K, 10K, 20K
iterations for the Cityscapes dataset, CamVid dataset,
and COCO-Stuff datasets respectively.
For the augmentation, we randomly horizontally flip,
randomly scale, and randomly crop the input images
to a fixed size for training. The random scales contain
{ 0.75, 1, 1.25, 1.5, 1.75, 2.0}. And the cropped resolutions are 2048 × 1024 for Cityscapes, 960 × 720 for
CamVid, 640 × 640 for COCO-Stuff respectively. Besides, the augmented input of Cityscapes will be resized
into 1024 × 512 resolution to train our model
FROM BiSeNet V2: Bilateral Network with Guided Aggregation for Real-time Semantic Segmentation

-------------------------------------------------------------------------------------------
4.2.1. Training Settings
Experiments were performed using PyTorch. During model training, the stochastic
gradient descent (SGD) [39] algorithm was employed, with an initial momentum set to
0.9. In the experiment, we used the initial learning rate strategy where the initial rate was
multiplied by

1 − iter
max_iter
power
, and the power was set to 0.9. For the first 1000 iterations,
a linear warmup [40] was applied. For the Cityscapes dataset, we configured the batch size
to 8, the initial learning rate to 0.01, applied weight decay to 0.0005, and trained the model
for 80,000 iterations. We trained the model on the CamVid dataset using a batch size of 4,
an initial learning rate of 0.01, a weight decay of 0.0002, and 20,000 iterations. The training
process employs a single A100 GPU with CUDA 11.7, PyTorch 1.11, and cuDNN 8.0.
4.2.2. Data Augmentation
This technique improves the model’s generalizability by augmenting data. We employed
random cropping, scaling, and horizontal flipping for data augmentation during
training. For the Cityscapes dataset, the cropping resolution was set to 1024 × 1024, while
for the CamVid dataset, it was set to 720 × 960. The random scales comprised {0.5, 0.75, 1.0,
1.25, 1.5, 1.75}. The inference process involved image resizing to ensure compatibility with
the model. Cityscapes images were resized to a resolution of 1024 × 1024, while CamVid
images used 720 × 960. After making predictions, the results were adjusted to the original
input size for the Cityscapes dataset.
FROM BMSeNet: Multiscale Context Pyramid Pooling and Spatial Detail Enhancement Network for Real-Time Semantic Segmentation
---------------------------------------------------------------------------------------------

FILE GITHUB
https://github.com/CoinCheung/BiSeNet/blob/master/lib/data/transform_cv2.py 
https://github.com/CoinCheung/BiSeNet/blob/master/configs/bisenetv2_city.py

------------------------------------------------------------------------------------------------------------
Semantic Segmentation. We use mini-batch stochastic
gradient descent (SGD) with momentum 0.9, weight decay
5e
−4
. The batch size is set as 48, 24 for the Cityscapes,
CamVid dataset respectively. As common configuration, we
utilize ”poly” learning rate policy in which the initial rate is
multiplied by (1 −
iter
max iter )
power. The power is set to 0.9
and the initial learning rate is set as 0.01. Besides, we train
the model for 60, 000, 10, 000 iterations for the Cityscapes,
CamVid dataset respectively, in which we adopt warmup
strategy at the first 1000, 200 iterations.
Data augmentation contains color jittering, random horizontal flip, random crop and random resize. The scale
ranges in [0.125, 1.5] and cropped resolution is 1024 × 512
for training Cityscapes. For training CamVid, the scale
ranges in [0.5, 2.5] and cropped resolution is 960 × 720.
In all experiments, we conduct our experiments base on
pytorch-1.1 on a docker. We perform all experiments under CUDA 10.0, CUDNN 7.6.4 and TensorRT 5.0.1.5 on
NVIDIA GTX 1080Ti GPU with batch size 1 for benchmarking the computing power of our method.


FROM Rethinking BiSeNet For Real-time Semantic Segmentation
-------------------------------------------------------------------------------------------------------
https://www.kaggle.com/code/mattiaottoborgo/bisenetgta5-2-cityscapes-data-augmentation
---------------------------------------------------------------------------------------------------
https://github.com/meetps/pytorch-semseg/blob/master/ptsemseg/augmentations/augmentations.py
---------------------------------------------------------------------------------------------------
https://github.com/hszhao/semseg/blob/master/util/transform.py
----------------------------------------------------------------------------------------------------
https://github.com/hoi4d/HOI4D_SemSeg/blob/main/datasets/seg_base.py
--------------------------------------------------------------------------------------------
https://github.com/LittleWat/multichannel-semseg-with-uda/blob/master/transform.py
---------------------------------------------------------------------------------------------
https://github.com/YuanYunshuang/SemsegDA/blob/master/augmentations/augmentations.py
--------------------------------------------------------------------------------------------------
https://github.com/Saurav-31/semseg/blob/master/data_aug.py
--------------------------------------------------------------------------------------------------------
https://github.com/J-JunChen/Real-time-Semseg/blob/main/utils/transform.py
-------------------------------------------------------------------------------------------------------
https://github.com/Mathieu-van-Luijken/Robust-Data-Augmentations-For-Segformer/blob/main/dataloader.py
---------------------------------------------------------------------------------------------------


